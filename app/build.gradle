apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
def ext = rootProject.ext
def cfg = ext.android

static def buildTime() {
    return new Date().format("yyyyMMdd")
}
android {
    compileSdkVersion cfg.compileSdkVersion

    defaultConfig {
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        applicationId "com.duoduovv.mhhh"
        //打包时间
        resValue "string", "build_time", buildTime()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        consumerProguardFiles "consumer-rules.pro"//把混淆文件打入aar
    }

    applicationVariants.all { variant ->
        def versionName
        def versionCode
        if (variant.buildType.isDebuggable()) {
        } else {
            versionCode = cfg.versionCode
            versionName = cfg.versionName

            variant.outputs.all { output ->
                output.versionNameOverride = versionName
                output.versionCodeOverride = versionCode
                outputFileName = "duoduo_P_${variant.productFlavors[0].name}_v${variant.versionName}_${variant.buildType.name}.apk"
            }
        }
    }
    flavorDimensions 'default'
    productFlavors {
        df {}
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    signingConfigs {
        release {
            keyAlias "mihuahaohan"
            keyPassword "mihuahaohan2021"
            storeFile file("../keystore/mihuahaohan.jks")
            storePassword "mihuahaohan2021"
        }

        debug {
            keyAlias "mihuahaohan"
            keyPassword "mihuahaohan2021"
            storeFile file("../keystore/mihuahaohan.jks")
            storePassword "mihuahaohan2021"
        }
    }

    buildTypes {
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }

        debug {
            //给applicationId添加后缀“.debug”
//            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets{
        main{
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    if (isModule.toBoolean()){
        //在组件开发模式下app壳工程只需要依赖Common功能组件
        implementation project(path: ':common')
    }else{
        //在集成模式下app壳工程必须依赖所有在应用Application中声明的业务组件，并且不需要再依赖任何功能组件。
        implementation project(path: ':main')
        implementation project(path: ':cinema')
        implementation project(path: ':hotspot')
        implementation project(path: ':movie')
        implementation project(path: ':personal')
    }
}